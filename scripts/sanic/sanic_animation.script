local mod_ground_mode = require "scripts.shared.ground_mode"
local mod_utils = require "scripts.shared.utils"

local mod_sanic_state = require "scripts.sanic.sanic_state"

local UNFLIPPED = 1
local FLIPPED = 2


local ANIM_HASH_STAND = {hash("stand"), hash("stand_flipped")}
local ANIM_HASH_ROLL = {hash("roll"), hash("roll")} 
local ANIM_HASH_DUCK = {hash("duck"), hash("duck_flipped")}
local ANIM_HASH_LOOK_UP = {hash("look_up"), hash("look_up_flipped")}

local ANIM_HASH_RUN_SLOW_OVER = {hash("run_slow_over"), hash("run_slow_over_flipped")}
local ANIM_HASH_RUN_FAST_OVER = {hash("run_fast_over"), hash("run_fast_over_flipped")}

local GROUND_MODE_RUN_ANIMS_SLOW = {ANIM_HASH_RUN_SLOW_OVER, nil, nil, nil}
local GROUND_MODE_RUN_ANIMS_FAST = {ANIM_HASH_RUN_FAST_OVER, nil, nil, nil}

local GROUND_SPEED_RUN_ANIM_THRESHOLDS =	{
												{threshold = 0.35, anims = GROUND_MODE_RUN_ANIMS_SLOW},
												{threshold = 4.0, anims = GROUND_MODE_RUN_ANIMS_FAST}
											}

function init(self)
	
	self.flipped = nil
	
	self.sanic_state = nil
	self.gsp = nil
	
	self.rolling = nil
	self.ducking = nil
	self.looking_up = nil
	
	self.last_set_ground_speed = nil
	
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end

function update(self, dt)
	-- Update animation state
	local flipped = UNFLIPPED
	if go.get("#sanic", "flipped") == true then flipped = FLIPPED end
	
	local sanic_state = go.get("#sanic", "sanic_state")
	local gsp = go.get("#sanic", "gsp")
	
	local rolling = go.get("#sanic", "rolling")
	local ducking = go.get("#sanic", "ducking")
	local looking_up = go.get("#sanic", "looking_up")
	
	-- TODO: Drive this from events instead
	local refresh_anim =	self.flipped ~= flipped or
							self.sanic_state ~= sanic_state or
							(self.gsp ~= gsp and rolling == false) or
							self.rolling ~= rolling or
							self.ducking ~= ducking or
							self.looking_up ~= looking_up
							
	self.flipped = flipped
	self.sanic_state = sanic_state
	self.gsp = gsp
	self.rolling = rolling
	self.ducking = ducking
	self.looking_up = looking_up
							
	if refresh_anim == true then
		do_refresh_anim(self)
	end						
end



function get_ground_speed_animation(gsp)
	local ret = nil
	
	for i, v in ipairs(GROUND_SPEED_RUN_ANIM_THRESHOLDS) do
		if math.abs(gsp) > v.threshold then
			ret = v.anims
		else
			break
		end	
	end
	
	return ret
end



function do_refresh_anim(self)
	--if self.sanic_state == mod_sanic_state.SANIC_STATE_AIR then
		
		--play_animation_flipped(self, ANIM_HASH_ROLL)
		
	--elseif self.sanic_state == mod_sanic_state.SANIC_STATE_GROUND then
		if self.rolling then
			play_animation_flipped(self, ANIM_HASH_ROLL)
		else
			if self.ducking then
				play_animation_flipped(self, ANIM_HASH_DUCK)
			elseif self.looking_up then
				play_animation_flipped(self, ANIM_HASH_LOOK_UP)
			elseif self.rolling then
				play_animation_flipped(self, ANIM_HASH_ROLL)
			else
				local gsp_anim = get_ground_speed_animation(self.gsp)
				if gsp_anim ~= nil then
					if gsp_anim ~= self.last_set_ground_speed then
						play_animation_flipped(self, gsp_anim[mod_ground_mode.SANIC_GROUND_MODE_OVER])
						self.last_set_ground_speed = gsp_anim
					end
				else
					play_animation_flipped(self, ANIM_HASH_STAND)	
					self.last_set_ground_speed = nil
				end
			end
		end
		
	--end
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	-- Add input-handling code here
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end


function play_animation(anim_hash)
	--print(anim_hash)
	msg.post("#sprite", "play_animation", {id = anim_hash})
end

function play_animation_flipped(self, anim_hash_group)
	play_animation(anim_hash_group[self.flipped])
end