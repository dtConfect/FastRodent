local mod_ground_mode = require "scripts.shared.ground_mode"
local mod_utils = require "scripts.shared.utils"

local mod_sanic_state = require "scripts.sanic.sanic_state"

local UNFLIPPED = 1
local FLIPPED = 2


local ANIM_HASH_STAND = {hash("stand"), hash("stand_flipped")}
local ANIM_HASH_ROLL = {hash("roll"), hash("roll")} 
local ANIM_HASH_DECELERATING = {hash("decel"), hash("decel_flipped")}
local ANIM_HASH_TURN = {hash("turn"), hash("turn_flipped")}
local ANIM_HASH_DUCK = {hash("duck"), hash("duck_flipped")}
local ANIM_HASH_LOOK_UP = {hash("look_up"), hash("look_up_flipped")}

local ANIM_HASH_RUN_SLOW_OVER = {hash("run_slow_over"), hash("run_slow_over_flipped")}
local ANIM_HASH_RUN_FAST_OVER = {hash("run_fast_over"), hash("run_fast_over_flipped")}

local GROUND_MODE_RUN_ANIMS_SLOW = {ANIM_HASH_RUN_SLOW_OVER, nil, nil, nil}
local GROUND_MODE_RUN_ANIMS_FAST = {ANIM_HASH_RUN_FAST_OVER, nil, nil, nil}

local GROUND_SPEED_RUN_ANIM_THRESHOLDS =	{
												{threshold = 0.1, anims = GROUND_MODE_RUN_ANIMS_SLOW},
												{threshold = 6.0, anims = GROUND_MODE_RUN_ANIMS_FAST}
											}

function init(self)
	
	self.flipped = false
	self.last_set_animation = nil
	
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end

function update(self, dt)
	self.flipped = UNFLIPPED
	if go.get("#sanic", "flipped") == true then self.flipped = FLIPPED end
	
	-- Update animation state
	do_refresh_anim(self)					
end



function get_ground_speed_animation(gsp)
	local ret = nil
	
	for i, v in ipairs(GROUND_SPEED_RUN_ANIM_THRESHOLDS) do
		if math.abs(gsp) > v.threshold then
			ret = v.anims
		else
			break
		end	
	end
	
	return ret
end



function do_refresh_anim(self)
	local sanic_state = go.get("#sanic", "sanic_state")
	local gsp = go.get("#sanic", "gsp")
	
	local rolling = go.get("#sanic", "rolling")
	local ducking = go.get("#sanic", "ducking")
	local looking_up = go.get("#sanic", "looking_up")
	
	local decelerating = go.get("#sanic", "decelerating")
	local turned = go.get("#sanic", "turned")
	
	
	if rolling then
		play_animation_flipped(self, ANIM_HASH_ROLL)
	elseif decelerating then
		play_animation_flipped(self, ANIM_HASH_DECELERATING)
	elseif turned then
		play_animation_flipped(self, ANIM_HASH_TURN)
	elseif ducking then
		print("duck")
		play_animation_flipped(self, ANIM_HASH_DUCK)
	elseif looking_up then
		play_animation_flipped(self, ANIM_HASH_LOOK_UP)
	else
		local gsp_anim = get_ground_speed_animation(gsp)
		if gsp_anim ~= nil then
			play_animation_flipped(self, gsp_anim[mod_ground_mode.SANIC_GROUND_MODE_OVER])
		else
			play_animation_flipped(self, ANIM_HASH_STAND)	
		end
	end
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	-- Add input-handling code here
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end

function play_animation(self, anim_hash, force)
	force = force or false
	
	print(anim_hash)
	if force or self.last_set_animation ~= anim_hash then
		msg.post("#sprite", "play_animation", {id = anim_hash})
		self.last_set_animation = anim_hash
	end
end

function play_animation_flipped(self, anim_hash_group, force)
	play_animation(self, anim_hash_group[self.flipped], force)
end